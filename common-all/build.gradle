apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 28

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def kotlinJsOutputPath = "build/outputs/kotlinJs"
def firebaseFunctionsPath = "../firebase/functions/kotlin2js"

kotlin {
    targets {
        fromPreset(presets.js, 'js') {
            compileKotlinJs.kotlinOptions {
                moduleKind = "commonjs"
                outputFile = "$kotlinJsOutputPath/index.js"
                metaInfo = true
                sourceMap = true
            }
        }
        fromPreset(presets.android, 'android')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        jsMain {
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"
//                implementation "org.jetbrains.kotlin:kotlin-test-annotations"

            }
        }

        androidMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation 'com.google.firebase:firebase-firestore:17.1.0'
                implementation "com.android.support:recyclerview-v7:28.0.0"
                implementation 'com.android.support.constraint:constraint-layout:1.1.3'
                implementation "com.android.support:cardview-v7:28.0.0"
                implementation "com.android.support:design:28.0.0"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            }
        }

        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}

clean.doFirst {
    delete "${rootDir}/firebase/functions/kotlin2js"
}

task copyCommonJsFirebaseModules(type: Copy) {
    from kotlinJsOutputPath
    print(firebaseFunctionsPath)
    into firebaseFunctionsPath
}

task buildFirebaseFunctions() {}

task firebaseDeploy(type: Exec) {
    workingDir '../firebase'
    commandLine 'firebase', 'deploy'
}

task firebaseDeployLocaly(type: Exec) {
    workingDir '../firebase'
    commandLine 'firebase', 'functions:shell'
}

task serializationRefToLocalModule << {

    def serialization = 'kotlinx-serialization-runtime-js'

    ant.replaceregexp(match: "$serialization", replace: "../$serialization-0.9.0/$serialization", flags: 'g', byline: true) {
        fileset(dir: "$firebaseFunctionsPath", includes: 'index.js')
    }
}

buildFirebaseFunctions.dependsOn(copyCommonJsFirebaseModules)
firebaseDeployLocaly.dependsOn(copyCommonJsFirebaseModules)


firebaseDeploy.dependsOn(serializationRefToLocalModule)
serializationRefToLocalModule.dependsOn(copyCommonJsFirebaseModules)
copyCommonJsFirebaseModules.dependsOn(compileKotlinJs)


